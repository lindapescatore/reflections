When would you want to use a remote repository rather than keep all your work local?

This answer is obvious: Whenever the files need to be available to another computer, whether mine or someone else's.

Also, even if I always worked on one computer, a remote repository would be a way to back up the files.

Why might you want to always pull changes manually rather than have Git automatically stay up-to-date with your remote repository?

If other people are pushing to the Github repository, I might not want to get their changes until I've reviewed them. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Branches are for embarking on a new direction in your code, while keeping a master version untouched. You may merge them later, or not. 

Clones copy a repository, which could be on your own computer or on Github, whether in your own account or someone else's. The copy goes to your own computer. You don't need permission to clone a repository. To clone, copy the URL in the box at the bottom right of the repo's page, then enter the command 'git clone <paste-the-url>'

Fork is a copy of a repo from one Github repo to another. You can work on it remotely on Github, but if you want to work on it locally on your own computer, you must clone it first. To fork, click the fork button at the top righthand corner of the repo page.

What is the benefit of having a copy of the last known state of the remote stored locally?

Without having the last known state of the remote, git would have to do a lot more work every time you wanted to pull from the remote repository. The last known state lets git simplify the merge process when the tip of the local branch is reachable through the commit history of the remote branch.

How would you collaborate without using Git or Github? What would be easier, and what would be harder?

I would probably either use another version control system, such as Subversion, or something like Google Docs. Subversion is not distributed, so working offline is not as easy, and Google Docs is designed for documents like letters and reports, not code. But Google allows chat so we could discuss the changes immediately, instead of waiting to see if someone responded to my pull request and maybe having to explain why my changes are correct when they had a problem. 

When would you want to make changes in a separate branch, rather than directly in master? What benefits does each approach have?

I think this question is a repeat, but I'll answer it from a different perspective. Before, branching was about trying a new feature that I could merge later, if I wanted. With collaboration, it allows different people to work on the same master, and to see everyone's changes before merging. It keeps master as 'clean' as possible. 
What happens when you initialise a repository? Why do you need to do it?

When I initialise a repository, Git places a hidden directory called .git in the folder. 

The directory contains files that git needs to operate and keep track of my files.

I need to do it so that git will work. 

How is the staging area different from the working directory and the repository? What value do you think it offers?

The working directory is not tracked by git until they are added to the staging area. 

After I changed lesson_1_reflections.txt, I ran status again. Git noted that it had been modified. 

However, it did not notice that I had changed lesson_2_reflections.txt. 

Git advised me to re-add the file to update what will be committed. So I guess that if I don't, the version at the time of adding would be committed.

That makes me wonder what would happen to the changes I made in the interim.

I believe they would be lost. Notepad would probably ask me if I wanted to retain the file since it had been changed by another program.

Update: I was wrong. In git status, I see 'Changes not staged for commit:' and the same advice to add the file or checkout to discard changes.

The files in the staging area will be included in the next commit together.

The staging area allows me to group files so that any changes to them will be bundled into the same commit. 

If Caroline added all three files to her initial commit, then any future checkouts she made for the chili recipe would also affect the cake files.

I'm not sure yet whether initial adds and commits persist, so that those files are always bundled in that way.

I've always been confounded by the idea of the staging area. I want to go straight to 'commit.' This helped me see at least a little benefit.

How can you use the staging area to make sure you have one commit per logical change?

I can run git diff or git diff --staged to see what changes are ready to be committed in the staging area, and make sure that they represent only one logical change.

However, I'm not sure what I would do if I'd already made more changes than that. Would it be better to revert changes, then re-add and commit, then go back to the file and redo my changes, assuming they are still in the undo history, rinse and repeat? Or just commit and list more than one change?

What are some situations when branches would be helpful in keeping your history organised? 

Any time I want to try something out, or have different versions for different uses, it would be great to have a branch. 

How do the diagrams help you to visualise the branch structure?

The diagrams clearly show how the various commits may be unreachable, since they always know only their parent. 

Once they reach a certain point, they can't go back up the chain on a different branch. They can only go back until they reach a commit without a parent.

But I wonder how difficult it will be to merge them. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is one branch that has the label of the branch currently checked out, with all the commits saved in chronological order.

It's represented as a meeting of two branches because from that point you can backtrack to any parent.

What are the pros and cons of Git's automatic merging vs always doing merges manually?

Not having to copy-paste lines in the right place is an obvious benefit. But then again, there could be content you don't really want to add that gets dumped in automatically. Resolving conflicts can be tedious, and removing the extra lines is a pain. Could they be comment lines so they don't break everything? Maybe that is the point.